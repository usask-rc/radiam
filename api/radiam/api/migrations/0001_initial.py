# Generated by Django 2.2.1 on 2019-05-14 20:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import radiam.api.mixins
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, null=False, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=False, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, null=False, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('time_zone_id', models.CharField(blank=True, help_text='The users time zone identifier', max_length=50, null=True)),
                ('date_created', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The date this user object was created')),
                ('date_updated', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The date this user object was last updated')),
                ('notes', models.CharField(blank=True, help_text='Notes about this user', max_length=5000, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'rdm_user',
            },
            bases=(models.Model, radiam.api.mixins.UserPermissionMixin),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataCollectionMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='Data collection method label', max_length=100, null=False)),
            ],
            options={
                'db_table': 'rdm_data_collection_methods',
            },
            bases=(models.Model, radiam.api.mixins.SuperuserOnlyPermissionMixin),
        ),
        migrations.CreateModel(
            name='DataCollectionStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='The data collection status label', max_length=100, null=False)),
            ],
            options={
                'db_table': 'rdm_data_collection_status',
            },
            bases=(models.Model, radiam.api.mixins.ProjectDetailPermissionMixin),
        ),
        migrations.CreateModel(
            name='DistributionRestriction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='The distribution restriction label', max_length=100, null=False)),
            ],
            options={
                'db_table': 'rdm_distribution_restriction',
            },
            bases=(models.Model, radiam.api.mixins.SuperuserOnlyPermissionMixin),
        ),
        migrations.CreateModel(
            name='GroupRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, help_text='The label for this role', max_length=80, null=False, unique=True)),
                ('description', models.CharField(blank=True, help_text='A description of this role', max_length=500, null=False)),
            ],
            options={
                'db_table': 'rdm_group_roles',
            },
            bases=(models.Model, radiam.api.mixins.SuperuserOnlyPermissionMixin),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_name', models.CharField(blank=True, help_text='Friendly display name for this location (optional)', max_length=100, null=False)),
                ('host_name', models.CharField(help_text='The last known hostname for this location', max_length=100, null=False)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this location is currently active')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this location was created')),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this location was last updated')),
            ],
            options={
                'db_table': 'rdm_locations',
            },
        ),
        migrations.AddField(
            model_name='location',
            name='globus_endpoint',
            field=models.CharField(blank=True, help_text='An optional UUID of a Globus Endpoint that contains the files for the location.', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='location',
            name='globus_path',
            field=models.TextField(blank=True, help_text='An optional path on a Globus Endpoint that leads to the files for the location.', null=True),
        ),
        migrations.AddField(
            model_name='location',
            name='notes',
            field=models.TextField(blank=True, help_text='An optional freeform text field for notes about this location.'),
        ),
        migrations.AddField(
            model_name='location',
            name='portal_url',
            field=models.TextField(blank=True, help_text='An optional URL that will lead to the files indexed about this location.', null=True),
        ),
        migrations.CreateModel(
            name='LocationType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='The location type label', max_length=50, null=False)),
            ],
            options={
                'db_table': 'rdm_location_types',
            },
            bases=(models.Model, radiam.api.mixins.SuperuserOnlyPermissionMixin),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=False, help_text='The project name', max_length=200, null=False, unique=True)),
                ('number', models.CharField(blank=True, help_text='The assigned project number (optional)', max_length=40, null=True)),
                ('keywords', models.CharField(blank=True, help_text='Keywords for this project (comma separated text)', max_length=500, null=False)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this project was created')),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this project was last modified')),
            ],
            options={
                'db_table': 'rdm_projects',
            },
            bases=(models.Model, radiam.api.mixins.ProjectPermissionMixin),
        ),
        migrations.CreateModel(
            name='ProjectAvatar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('width', models.IntegerField(blank=True, help_text='The avatar image width will be calculated on upload (leave blank)')),
                ('height', models.IntegerField(blank=True, help_text='The avatar image height will be calculated on upload (leave blank)')),
                ('avatar_image', models.ImageField(height_field='height', help_text='The avatar binary image data', upload_to='uploads/avatars/projects/', width_field='width')),
            ],
            options={
                'db_table': 'rdm_project_avatars',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, help_text='The title of the data for this dataset', max_length=250)),
                ('abstract', models.CharField(blank=True, help_text='The abstract of the data for this dataset', max_length=3000)),
                ('study_site', models.CharField(blank=True, help_text='The study site of this dataset', max_length=250)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this dataset was created')),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this dataset was last modified')),
                ('data_collection_status', models.ForeignKey(help_text='Status of data collection for this dataset', null=True, on_delete=django.db.models.deletion.PROTECT, to='api.DataCollectionStatus')),
                ('distribution_restriction', models.ForeignKey(help_text='Distribution restriction for this dataset', null=True, on_delete=django.db.models.deletion.PROTECT, to='api.DistributionRestriction')),
            ],
            options={
                'db_table': 'rdm_datasets',
            },
            bases=(models.Model, radiam.api.mixins.DatasetPermissionMixin),
        ),
        migrations.CreateModel(
            name='DatasetDataCollectionMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_collection_method', models.ForeignKey(help_text='The data collection method', on_delete=django.db.models.deletion.PROTECT, to='api.DataCollectionMethod')),
                ('dataset', models.ForeignKey(help_text='The dataset this collection method applies to', on_delete=django.db.models.deletion.PROTECT, to='api.Dataset')),
            ],
            options={
                'db_table': 'rdm_dataset_data_collection_method',
            },
            bases=(models.Model, radiam.api.mixins.DatasetDetailPermissionMixin),
        ),
        migrations.CreateModel(
            name='SensitivityLevel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='The sensitivity label', max_length=100, null=False)),
            ],
            options={
                'db_table': 'rdm_sensitivity_level',
            },
            bases=(models.Model, radiam.api.mixins.SuperuserOnlyPermissionMixin),
        ),
        migrations.CreateModel(
            name='DatasetSensitivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dataset', models.ForeignKey(help_text='The dataset this sensitivity applies to', on_delete=django.db.models.deletion.PROTECT, to='api.Dataset')),
                ('sensitivity', models.ForeignKey(help_text='The sensitivity level', on_delete=django.db.models.deletion.PROTECT, to='api.SensitivityLevel')),
            ],
            options={
                'db_table': 'rdm_dataset_sensitivity',
            },
            bases=(models.Model, radiam.api.mixins.DatasetDetailPermissionMixin),
        ),
        migrations.CreateModel(
            name='UserAgent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The date this agent was installed')),
                ('date_updated', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The date this agent last checked in')),
                ('location', models.ForeignKey(help_text='The location where this agent is running', on_delete=django.db.models.deletion.PROTECT, to='api.Location')),
                ('user', models.ForeignKey(help_text='The user this agent is running as', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rdm_user_agents',
            },
        ),
        migrations.CreateModel(
            name='ResearchGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=False, help_text='The name of this group', max_length=200, null=False, unique=True)),
                ('description', models.CharField(help_text='A description for this group', max_length=500)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this group was created')),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this group was last modified')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this group is active')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent_group', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='api.ResearchGroup')),
            ],
            options={
                'db_table': 'rdm_research_groups',
            },
            bases=(models.Model, radiam.api.mixins.ResearchGroupPermissionMixin),
        ),
        migrations.CreateModel(
            name='ProjectStatistics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stat_date', models.DateTimeField(default=django.utils.timezone.now, help_text='The statistic date')),
                ('stat_key', models.CharField(blank=False, help_text='The key of the statistic', max_length=80, null=False)),
                ('stat_qualifier', models.CharField(blank=True, help_text='Qualifier on the statistic key (optional)', max_length=80, null=True)),
                ('stat_value', models.CharField(help_text='The statistic value', max_length=200)),
                ('project', models.ForeignKey(help_text='The project for this statistic', on_delete=django.db.models.deletion.PROTECT, to='api.Project')),
            ],
            options={
                'db_table': 'rdm_data_project_statistics',
            },
            bases=(models.Model, radiam.api.mixins.ProjectDetailPermissionMixin),
        ),
        migrations.AddField(
            model_name='project',
            name='group',
            field=models.ForeignKey(help_text='The group this project belongs to', on_delete=django.db.models.deletion.PROTECT, to='api.ResearchGroup'),
        ),
        migrations.AddField(
            model_name='project',
            name='avatar',
            field=models.ForeignKey(help_text='The avatar for this project (optional)', blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.ProjectAvatar'),
        ),
        migrations.AddField(
            model_name='project',
            name='primary_contact_user',
            field=models.ForeignKey(help_text='The primary contact person for this project', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dataset',
            name='project',
            field=models.ForeignKey(help_text='The project this dataset belongs to', on_delete=django.db.models.deletion.PROTECT, to='api.Project'),
        ),        
        migrations.AddField(
            model_name='location',
            name='location_type',
            field=models.ForeignKey(help_text='The location type', on_delete=django.db.models.deletion.PROTECT, to='api.LocationType'),
        ),
        migrations.CreateModel(
            name='GroupViewGrant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fields', models.CharField(blank=True, help_text='The fields that are visible through this grant', max_length=5000, null=False)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this grant was created')),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this grant was last modifed')),
                ('date_starts', models.DateTimeField(blank=True, help_text='The date this grant starts', null=True)),
                ('date_expires', models.DateTimeField(blank=True, help_text='The date this grant expires', null=True)),
                ('group', models.ForeignKey(help_text='The group that the grant is applied to', on_delete=django.db.models.deletion.PROTECT, to='api.ResearchGroup')),
            ],
            options={
                'db_table': 'rdm_group_view_grants',
            },
            bases=(models.Model, radiam.api.mixins.GroupViewGrantPermissionMixin),
        ),
        migrations.AddField(
            model_name='groupviewgrant',
            name='dataset',
            field=models.ForeignKey(help_text='The dataset this grant is applied to', on_delete=django.db.models.deletion.PROTECT, to='api.Dataset'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this person is currently active in this group')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this user role was created')),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this user role was last modified')),
                ('date_expires', models.DateTimeField(blank=True, help_text='The date this users role expires (optional)', null=True)),
                ('group', models.ForeignKey(help_text='The group', on_delete=django.db.models.deletion.PROTECT, to='api.ResearchGroup')),
                ('group_role', models.ForeignKey(help_text='The users role within this group', on_delete=django.db.models.deletion.PROTECT, to='api.GroupRole')),
                ('user', models.ForeignKey(help_text='The user', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rdm_group_members',
            },
            bases=(models.Model, radiam.api.mixins.GroupMemberPermissionMixin),
        ),
        migrations.AddConstraint(
            model_name='groupmember',
            constraint=models.UniqueConstraint(fields=('user', 'group'), name='unique_group_membership'),
        ),
    ]
