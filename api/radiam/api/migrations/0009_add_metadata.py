# Generated by Django 2.2.1 on 2019-05-14 20:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import radiam.api.mixins
import uuid


class Migration(migrations.Migration):
    # Migration script to create necessary tables for metadata of Projects, Datasets, Files and Folders
    initial = True

    dependencies = [
        ('api', '0008_user_user_orcid_id'),
    ]

    operations = [

        migrations.CreateModel(
            name='MetadataUIType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(blank=False, null=False, help_text='A key that maps to an xml element', max_length=100)),
                ('label', models.CharField(blank=False, null=False, help_text='A label identifying the type of UI input to use for this field', max_length=100)),
            ],
            options={
                'db_table': 'rdm_metadata_ui_types',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

        migrations.CreateModel(
            name='MetadataValueType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.TextField(blank=False, null=False, help_text='A key that maps to an xml element', max_length=100)),
                ('label', models.CharField(blank=False, help_text='A label identifying the type of metadata value stored for this field', max_length=100, null=False)),
            ],
            options={
                'db_table': 'rdm_metadata_value_types',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

        migrations.CreateModel(
            name='ChoiceList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='A label identifying the contents of this list', max_length=100, null=False)),
            ],
            options={
                'db_table': 'rdm_choice_lists',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

        migrations.CreateModel(
            name='ChoiceListValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='The label to show in the UI for this choice', max_length=100, null=False)),
                ('value', models.CharField(blank=False, help_text='The value to store for the metadata field if this choice is picked', max_length=100, null=False)),
                ('list', models.ForeignKey(help_text='The list this value is in', null=False, blank=False, on_delete=django.db.models.deletion.PROTECT, to='api.ChoiceList')),
            ],
            options={
                'db_table': 'rdm_choice_list_values',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

        migrations.CreateModel(
            name='Schema',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='Data collection method label', max_length=100, null=False)),
            ],
            options={
                'db_table': 'rdm_schemas',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=False, help_text='Metadata field label', max_length=100, null=False)),
                ('help', models.CharField(blank=False, help_text='A key for additional help information about this field', max_length=100, null=False)),
                ('schema', models.ForeignKey(help_text='The schema of this metadata field', null=False, blank=False, on_delete=django.db.models.deletion.PROTECT, to='api.Schema')),
                ('parent', models.ForeignKey(help_text='The parent field of this metadata field', null=True, on_delete=django.db.models.deletion.PROTECT, to='api.Field')),
                ('metadata_ui_type', models.ForeignKey(help_text='The type of UI control to show to the user for this metadata field', on_delete=django.db.models.deletion.PROTECT, to='api.MetadataUIType')),
                ('metadata_value_type', models.ForeignKey(help_text='The type of the value to store in the index', on_delete=django.db.models.deletion.PROTECT, to='api.MetadataValueType')),
                ('many_values', models.BooleanField(default=False, help_text='Whether this metadata field stores multiple values')),
                ('choice_list', models.ForeignKey(help_text='A list of choices and values that cover the options for this metadata field.', null=True, on_delete=django.db.models.deletion.PROTECT, to='api.ChoiceList')),
                ('default_choice', models.ForeignKey(help_text='Set to the default value for a list', null=True, blank=True, on_delete=django.db.models.deletion.PROTECT, to='api.ChoiceListValue')),
                ('default_order', models.IntegerField(default=-1, null=False, blank=False, help_text='Set to the default order for this field in the UI')),
                ('default_value', models.TextField(help_text='Set to the default value for this field', null=True, blank=True)),
            ],
            options={
                'db_table': 'rdm_fields',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('group', models.ForeignKey(help_text='', null=True, blank=True, on_delete=django.db.models.deletion.PROTECT, to='api.ResearchGroup')),
                ('project', models.ForeignKey(help_text='', null=True, blank=True, on_delete=django.db.models.deletion.PROTECT, to='api.Project')),
                ('dataset', models.ForeignKey(help_text='', null=True, blank=True, on_delete=django.db.models.deletion.PROTECT, to='api.Dataset')),
                ('file', models.UUIDField(default=uuid.uuid4, null=True, blank=True, editable=False, primary_key=False, serialize=False)),
                ('folder', models.UUIDField(default=uuid.uuid4, null=True, blank=True, editable=False, primary_key=False, serialize=False)),
            ],
            options={
                'db_table': 'rdm_entities',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

        migrations.CreateModel(
            name='SelectedSchema',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity', models.ForeignKey(help_text='The entity chosen to represent the attached to this Project, Dataset, File or Folder', null=False, blank=False, on_delete=django.db.models.deletion.PROTECT, to='api.Entity')),
                ('schema', models.ForeignKey(help_text='The schema chosen to be attached to this Project, Dataset, File or Folder', null=False, blank=False, on_delete=django.db.models.deletion.PROTECT, to='api.Schema')),
            ],
            options={
                'db_table': 'rdm_selected_schemas',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

        migrations.CreateModel(
            name='SelectedField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity', models.ForeignKey(help_text='The entity chosen to represent the attached to this Project, Dataset, File or Folder', null=False, blank=False, on_delete=django.db.models.deletion.PROTECT, to='api.Entity')),
                ('field', models.ForeignKey(help_text='The id of the field that this refers to.', null=False, blank=False, on_delete=django.db.models.deletion.PROTECT, to='api.Field')),
                ('default', models.TextField(help_text='The default value for this field.', null=True, blank=True)),
                ('required', models.BooleanField(default=False, help_text='True if the field for this entity should be required.')),
                ('visible', models.BooleanField(default=True, help_text='Whether this metadata field should be shown in the UI')),
                ('order', models.IntegerField(default=-1, null=False, blank=False, help_text='0 being the first metadata field to show moving down the list. If two have the same order they probably can be shown in either order.')),
            ],
            options={
                'db_table': 'rdm_selected_fields',
            },
            bases=(models.Model, radiam.api.mixins.MetadataSchemaPermissionMixin),
        ),

    ]
